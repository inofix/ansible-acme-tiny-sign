---
# tasks file for acme-tiny-sign/

- name: 'Create an empty (or just touch) cert user "acme" is able to write'
  file:
    state: touch
    path: '{{ acme__certificate }}'
    owner: '{{ acme__user }}'
    group: '{{ acme__group }}'
    mode: '0644'
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__certificate: '{{ acme__cert_path }}.crt'
  with_items: '{{ acme__domain }}'

- name: 'Run acme-tiny'
  become: True
  become_user: '{{ acme__user }}'
  shell: 'acme-tiny --account-key {{ acme__account_key }} --csr {{ acme__request }} --acme-dir {{ acme__challenge_dir }} > {{ acme__certificate }}'
  register: acme_tiny__register_certificate
  failed_when: False
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__request: '{{ acme__cert_path }}.csr'
    acme__certificate: '{{ acme__cert_path }}.crt'
  with_items: '{{ acme__domain }}'

- name: 'Show acme-tiny output'
  debug: var=acme_tiny__register_certificate
  when: not ansible_check_mode|d()
  failed_when: ("rc" in item) and
               (not item.rc == 0)
  with_items: '{{ acme_tiny__register_certificate.results }}'

# Rebundle the result for all the different service flavours
- name: 'Create a consumable cert copy for the system'
  copy:
    remote_src: True
    src: '{{ acme__certificate }}'
    dest: '{{ acme__target_cert }}'
    owner: '{{ acme__user }}'
    group: '{{ acme__os__cert_group }}'
    mode: '0644'
  when: acme_tiny__register_certificate.results |
                    selectattr("item", "equalto", item) | first | changed
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__request: '{{ acme__cert_path }}.csr'
    acme__certificate: '{{ acme__cert_path }}.crt'
    acme__target_cert: '{{ acme__cert_path }}/{{ acme__cert_name }}.crt'
  with_items: '{{ acme__domain }}'

- name: 'Create an empty (or just touch) chain file "acme" is able to write'
  file:
    path: '{{ acme__target_chain }}'
    state: touch
    owner: '{{ acme__user }}'
    group: '{{ acme__os__cert_group }}'
    mode: '0644'
  when: acme_tiny__register_certificate.results |
                    selectattr("item", "equalto", item) | first | changed
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__target_chain: '{{ acme__cert_path }}/{{ acme__cert_name }}_chain.crt'
  with_items: '{{ acme__domain }}'

- name: 'Merge the certificate chain'
  become: True
  become_user: '{{ acme__user }}'
  shell: 'cat {{ acme__certificate }} {{ acme__config_dir }}/{{ acme__letsencrypt_certs.0.file }} {{ acme__config_dir }}/{{ acme__letsencrypt_certs.1.file }} > {{ acme__target_chain }}'
  when: acme_tiny__register_certificate.results |
                    selectattr("item", "equalto", item) | first | changed
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__certificate: '{{ acme__cert_path }}.crt'
    acme__target_chain: '{{ acme__cert_path }}/{{ acme__cert_name }}_chain.crt'
  with_items: '{{ acme__domain }}'

# If no key is available, this means that the key is on a separate host and
# that host must organize its cert chain after catching the cert here.
- name: 'Test if a private key is available'
  stat:
    path: '{{ acme__key }}'
  register: acme_tiny__key
  vars:
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__key: '{{ acme__cert_path }}.key'
  with_items: '{{ acme__domain }}'

- name: 'Create a consumer key file'
  copy:
    remote_src: True
    src: '{{ acme__key }}'
    dest: '{{ acme__target_key }}'
    owner: 'root'
    group: '{{ acme__os__cert_group }}'
    mode: '0640'
  when: acme_tiny__register_certificate.results |
                selectattr("item", "equalto", item) | first | changed and
        acme_t_k_r.stat.isreg is defined and acme_t_k_r.stat.isreg
  vars:
    acme_t_k_r: '{{ acme_tiny__key.results |
                selectattr("item", "equalto", item) | first }}'
    acme__cert_name: '{{ item.domain[0]
                        if (item.domain is iterable and
                                not item.domain is string)
                        else item.domain }}'
    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
    acme__key: '{{ acme__cert_path }}.key'
    acme__target_key: '{{ acme__cert_path }}/{{ acme__cert_name }}.key'
  with_items: '{{ acme__domain }}'

## TODO this task is temp. disabled as the cronjob can not access the key (as 'acme')
#- name: 'Merge the consumer key/cert file'
#  shell: 'umask 077 && cat {{ acme__key }} {{ acme__certificate }} > {{ acme__target_pem }}'
#  when: acme_tiny__register_certificate.results |
#                selectattr("item", "equalto", item) | first | changed and
#        acme_t_k_r.stat.isreg is defined and acme_t_k_r.stat.isreg
#  vars:
#    acme_t_k_r: '{{ acme_tiny__key.results |
#                selectattr("item", "equalto", item) | first }}'
#    acme__cert_name: '{{ item.domain[0]
#                        if (item.domain is iterable and
#                                not item.domain is string)
#                        else item.domain }}'
#    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
#    acme__certificate: '{{ acme__cert_path }}.crt'
#    acme__key: '{{ acme__cert_path }}.key'
#    acme__target_pem: '{{ acme__cert_path }}/{{ acme__cert_name }}.pem'
#  with_items: '{{ acme__domain }}'

## TODO this task is temp. disabled as the cronjob can not access the key (as 'acme')
#- name: 'Fix permissions of the key/cert pem'
#  file:
#    path: '{{ acme__target_pem }}'
#    owner: 'root'
#    group: '{{ acme__os__cert_group }}'
#    mode: '0640'
#  when: acme_tiny__register_certificate.results |
#                selectattr("item", "equalto", item) | first | changed and
#        acme_t_k_r.stat.isreg is defined and acme_t_k_r.stat.isreg
#  vars:
#    acme_t_k_r: '{{ acme_tiny__key.results |
#                selectattr("item", "equalto", item) | first }}'
#    acme__cert_name: '{{ item.domain[0]
#                        if (item.domain is iterable and
#                                not item.domain is string)
#                        else item.domain }}'
#    acme__cert_path: '{{ acme__config_dir }}/{{ acme__cert_name }}'
#    acme__target_pem: '{{ acme__cert_path }}/{{ acme__cert_name }}.pem'
#  with_items: '{{ acme__domain }}'

